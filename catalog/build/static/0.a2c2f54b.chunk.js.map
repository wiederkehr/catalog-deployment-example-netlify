{"version":3,"sources":["webpack:///static/0.a2c2f54b.chunk.js","webpack:///./catalog/walkthrough.md?4274","webpack:///./catalog/walkthrough.md"],"names":["webpackJsonp","780","module","exports","__webpack_require__","React","createReactClass","PageRenderer","__esModule","default","WrappedPageRenderer","displayName","getInitialState","content","componentWillMount","render","createElement","Object","assign","this","props","state","__catalog_loader__","781"],"mappings":"AAAAA,cAAc,IAERC,IACA,SAAUC,EAAQC,EAASC,GCF7B,GAAIC,GAAQ,EAAQ,IAChBC,EAAmB,EAAQ,IAC3BC,EAAe,EAAQ,KAAWA,YAClCA,GAAaC,aACfD,EAAeA,EAAaE,QAE9B,IAAIC,GAAsBJ,GACxBK,YAAa,sBACbC,gBAAiB,WACf,OAAQC,QAAS,EAAQ,OAE3BC,mBAAoB,aAUpBC,OAAQ,WACN,MAAOV,GAAMW,cAAcT,EAAcU,OAAOC,UAAWC,KAAKC,OAAQP,QAASM,KAAKE,MAAMR,aAGhGH,GAAoBY,oBAAqB,EACzCpB,EAAOC,QAAUO,GDUfa,IACA,SAAUrB,EAAQC,GEtCxBD,EAAOC,QAAU","file":"static/0.a2c2f54b.chunk.js","sourcesContent":["webpackJsonp([0],{\n\n/***/ 780:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n    var React = __webpack_require__(15);\n    var createReactClass = __webpack_require__(45);\n    var PageRenderer = __webpack_require__(293).PageRenderer;\n    if (PageRenderer.__esModule) {\n      PageRenderer = PageRenderer.default;\n    }\n    var WrappedPageRenderer = createReactClass({\n      displayName: 'WrappedPageRenderer',\n      getInitialState: function() {\n        return {content: __webpack_require__(781)};\n      },\n      componentWillMount: function() {\n        var component = this;\n        if (false) {\n          module.hot.accept(\"!!../node_modules/raw-loader/index.js!./walkthrough.md\", function() {\n            component.setState({\n              content: require(\"!!../node_modules/raw-loader/index.js!./walkthrough.md\")\n            })\n          })\n        }\n      },\n      render: function() {\n        return React.createElement(PageRenderer, Object.assign({}, this.props, {content: this.state.content}));\n      }\n    });\n    WrappedPageRenderer.__catalog_loader__ = true;\n    module.exports = WrappedPageRenderer;\n  \n\n/***/ }),\n\n/***/ 781:\n/***/ (function(module, exports) {\n\nmodule.exports = \"# Publish Catalog on Github Pages\\n\\nExample for creating and publishing an fresh instance of [Catalog](https://catalog.style/) using [Github Pages](https://pages.github.com/).\\n\\n## 1. Install Catalog\\n\\n1. Create a new Catalog following these [instructions](https://docs.catalog.style/installation/create-catalog).\\n2. Create a new repository on Github following these [instructions](https://help.github.com/en/github/creating-cloning-and-archiving-repositories/creating-a-new-repository).\\n3. Add your Catalog code to the new repository following these [instructions](https://help.github.com/en/github/importing-your-projects-to-github/adding-an-existing-project-to-github-using-the-command-line).\\n\\nFor more details about how to use Catalog, check out the [documentation](https://docs.catalog.style/).\\n\\n## 2. Configure Github Pages\\n\\n1. Setup Github Pages on the `Settings` page of your Github repository.\\n2. Select the `/doc` folder of the `master` branch as the source for your Github Pages.\\n\\n```image\\nplain: true\\nspan: 4\\nsrc: \\\"/github-pages-source.png\\\"\\n```\\n\\n## 3. Publish to Github Pages\\n\\n### Option 1: Publish Catalog Manually\\n\\nYou can build Catalog locally and then publish a new version manually whenever you’re ready.\\n\\n1. Build your Catalog locally using the script `catalog-build --public-url=/[your-repo-name]/ --out=docs`.\\n2. Push the code changes to your repository on Github.\\n3. Navigate to `https://[your-username].github.io/[your-repo-name]/` to see your new Catalog in full bloom.\\n\\n### Option 2: Publish Catalog Automatically\\n\\nAlternatively, you can build Catalog automatically whenever you push changes to your repository using [Github Actions](https://github.com/features/actions).\\n\\n1. Setup a new workflow on the `Actions` page of your Github repository.\\n2. Skip the template selection and set up a fresh workflow for yourself.\\n3. Give your workflow a descriptive name (i.e. `build-and-deploy-catalog.yml`).\\n4. Copy and paste the following workflow and change the `[repository-name]` to the name of your repository.\\n5. Save the workflow with _Start commit_ to commit the workflow file to your repository.\\n6. Navigate to `Actions` page of your repository to see your new workflow listed.\\n7. Make and commit a code change to your Catalog to see your publication workflow in action).\\n8. From now on, every new code change that you push to the `master` branch will publish a new version of Catalog.\\n\\n#### Workflow\\n\\n```\\nname: Build and Deploy Catalog\\n\\non: [push]\\n\\njobs:\\n  build:\\n\\n    runs-on: ubuntu-latest\\n\\n    steps:\\n    - name: Checkout\\n      uses: actions/checkout@v2\\n    - name: Use Node.js\\n      uses: actions/setup-node@v1\\n      with:\\n        node-version: '12.x'\\n    - name: Install Catalog\\n      run: yarn\\n    - name: Build Catalog\\n      run: yarn catalog-build --public-url=/[repository-name]/ --out=docs\\n    - name: Commit Changes\\n      uses: elstudio/actions-js-build/commit@v3\\n      with:\\n        commitMessage: Build Catalog\\n```\\n\"\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/0.a2c2f54b.chunk.js","\n    var React = require('react');\n    var createReactClass = require('create-react-class');\n    var PageRenderer = require('catalog').PageRenderer;\n    if (PageRenderer.__esModule) {\n      PageRenderer = PageRenderer.default;\n    }\n    var WrappedPageRenderer = createReactClass({\n      displayName: 'WrappedPageRenderer',\n      getInitialState: function() {\n        return {content: require(\"!!../node_modules/raw-loader/index.js!./walkthrough.md\")};\n      },\n      componentWillMount: function() {\n        var component = this;\n        if (module.hot) {\n          module.hot.accept(\"!!../node_modules/raw-loader/index.js!./walkthrough.md\", function() {\n            component.setState({\n              content: require(\"!!../node_modules/raw-loader/index.js!./walkthrough.md\")\n            })\n          })\n        }\n      },\n      render: function() {\n        return React.createElement(PageRenderer, Object.assign({}, this.props, {content: this.state.content}));\n      }\n    });\n    WrappedPageRenderer.__catalog_loader__ = true;\n    module.exports = WrappedPageRenderer;\n  \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./catalog/walkthrough.md\n// module id = 780\n// module chunks = 0","module.exports = \"# Publish Catalog on Github Pages\\n\\nExample for creating and publishing an fresh instance of [Catalog](https://catalog.style/) using [Github Pages](https://pages.github.com/).\\n\\n## 1. Install Catalog\\n\\n1. Create a new Catalog following these [instructions](https://docs.catalog.style/installation/create-catalog).\\n2. Create a new repository on Github following these [instructions](https://help.github.com/en/github/creating-cloning-and-archiving-repositories/creating-a-new-repository).\\n3. Add your Catalog code to the new repository following these [instructions](https://help.github.com/en/github/importing-your-projects-to-github/adding-an-existing-project-to-github-using-the-command-line).\\n\\nFor more details about how to use Catalog, check out the [documentation](https://docs.catalog.style/).\\n\\n## 2. Configure Github Pages\\n\\n1. Setup Github Pages on the `Settings` page of your Github repository.\\n2. Select the `/doc` folder of the `master` branch as the source for your Github Pages.\\n\\n```image\\nplain: true\\nspan: 4\\nsrc: \\\"/github-pages-source.png\\\"\\n```\\n\\n## 3. Publish to Github Pages\\n\\n### Option 1: Publish Catalog Manually\\n\\nYou can build Catalog locally and then publish a new version manually whenever you’re ready.\\n\\n1. Build your Catalog locally using the script `catalog-build --public-url=/[your-repo-name]/ --out=docs`.\\n2. Push the code changes to your repository on Github.\\n3. Navigate to `https://[your-username].github.io/[your-repo-name]/` to see your new Catalog in full bloom.\\n\\n### Option 2: Publish Catalog Automatically\\n\\nAlternatively, you can build Catalog automatically whenever you push changes to your repository using [Github Actions](https://github.com/features/actions).\\n\\n1. Setup a new workflow on the `Actions` page of your Github repository.\\n2. Skip the template selection and set up a fresh workflow for yourself.\\n3. Give your workflow a descriptive name (i.e. `build-and-deploy-catalog.yml`).\\n4. Copy and paste the following workflow and change the `[repository-name]` to the name of your repository.\\n5. Save the workflow with _Start commit_ to commit the workflow file to your repository.\\n6. Navigate to `Actions` page of your repository to see your new workflow listed.\\n7. Make and commit a code change to your Catalog to see your publication workflow in action).\\n8. From now on, every new code change that you push to the `master` branch will publish a new version of Catalog.\\n\\n#### Workflow\\n\\n```\\nname: Build and Deploy Catalog\\n\\non: [push]\\n\\njobs:\\n  build:\\n\\n    runs-on: ubuntu-latest\\n\\n    steps:\\n    - name: Checkout\\n      uses: actions/checkout@v2\\n    - name: Use Node.js\\n      uses: actions/setup-node@v1\\n      with:\\n        node-version: '12.x'\\n    - name: Install Catalog\\n      run: yarn\\n    - name: Build Catalog\\n      run: yarn catalog-build --public-url=/[repository-name]/ --out=docs\\n    - name: Commit Changes\\n      uses: elstudio/actions-js-build/commit@v3\\n      with:\\n        commitMessage: Build Catalog\\n```\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/raw-loader!./catalog/walkthrough.md\n// module id = 781\n// module chunks = 0"],"sourceRoot":""}